[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace Sextant
{
    public class DefaultViewModelFactory : Sextant.IViewModelFactory
    {
        public DefaultViewModelFactory() { }
        public TViewModel Create<TViewModel>(string? contract = null)
            where TViewModel : Sextant.IViewModel { }
    }
    public static class DependencyResolverMixins
    {
        public static string NavigationView { get; }
        public static Splat.IMutableDependencyResolver RegisterParameterViewStackService(this Splat.IMutableDependencyResolver dependencyResolver) { }
        public static Splat.IMutableDependencyResolver RegisterView<TView, TViewModel>(this Splat.IMutableDependencyResolver dependencyResolver, string? contract = null)
            where TView : ReactiveUI.IViewFor<TViewModel>, new ()
            where TViewModel :  class, Sextant.IViewModel { }
        public static Splat.IMutableDependencyResolver RegisterView<TView, TViewModel>(this Splat.IMutableDependencyResolver dependencyResolver, System.Func<ReactiveUI.IViewFor<TViewModel>> viewFactory, string? contract = null)
            where TView : ReactiveUI.IViewFor
            where TViewModel :  class, Sextant.IViewModel { }
        public static Splat.IMutableDependencyResolver RegisterViewModel<TViewModel>(this Splat.IMutableDependencyResolver dependencyResolver, string? contract = null)
            where TViewModel : Sextant.IViewModel, new () { }
        public static Splat.IMutableDependencyResolver RegisterViewModel<TViewModel>(this Splat.IMutableDependencyResolver dependencyResolver, System.Func<TViewModel> viewModelFactory, string? contract = null)
            where TViewModel :  class, Sextant.IViewModel { }
        public static Splat.IMutableDependencyResolver RegisterViewModel<TViewModel>(this Splat.IMutableDependencyResolver dependencyResolver, TViewModel viewModel, string? contract = null)
            where TViewModel :  class, Sextant.IViewModel { }
        public static Splat.IMutableDependencyResolver RegisterViewModelFactory(this Splat.IMutableDependencyResolver dependencyResolver) { }
        public static Splat.IMutableDependencyResolver RegisterViewModelFactory(this Splat.IMutableDependencyResolver dependencyResolver, System.Func<Sextant.IViewModelFactory> factory) { }
        public static Splat.IMutableDependencyResolver RegisterViewStackService(this Splat.IMutableDependencyResolver dependencyResolver) { }
        [System.Obsolete("Use the Func<IView, IViewModelFactory, T> variant.")]
        public static Splat.IMutableDependencyResolver RegisterViewStackService<T>(this Splat.IMutableDependencyResolver dependencyResolver, System.Func<Sextant.IView, T> factory)
            where T : Sextant.IViewStackService { }
        public static Splat.IMutableDependencyResolver RegisterViewStackService<T>(this Splat.IMutableDependencyResolver dependencyResolver, System.Func<Sextant.IView, Sextant.IViewModelFactory, T> factory)
            where T : Sextant.IViewStackService { }
    }
    public interface IDestructible
    {
        void Destroy();
    }
    public interface INavigable : Sextant.INavigated, Sextant.INavigating, Sextant.IViewModel { }
    public interface INavigated
    {
        System.IObservable<System.Reactive.Unit> WhenNavigatedFrom(Sextant.INavigationParameter parameter);
        System.IObservable<System.Reactive.Unit> WhenNavigatedTo(Sextant.INavigationParameter parameter);
    }
    public interface INavigating
    {
        System.IObservable<System.Reactive.Unit> WhenNavigatingTo(Sextant.INavigationParameter parameter);
    }
    public interface INavigationParameter : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.IEnumerable { }
    [System.Obsolete("Please use the IViewModel interface.")]
    public interface IPageViewModel : Sextant.IViewModel { }
    public interface IParameterViewStackService : Sextant.IViewStackService
    {
        System.IObservable<System.Reactive.Unit> PopPage(Sextant.INavigationParameter parameter, bool animate = true);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.INavigable navigableModal, Sextant.INavigationParameter parameter, string? contract = null, bool withNavigationPage = true);
        System.IObservable<System.Reactive.Unit> PushModal<TViewModel>(Sextant.INavigationParameter parameter, string? contract = null, bool withNavigationPage = true)
            where TViewModel : Sextant.INavigable;
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable navigableViewModel, Sextant.INavigationParameter parameter, string? contract = null, bool resetStack = false, bool animate = true);
        System.IObservable<System.Reactive.Unit> PushPage<TViewModel>(Sextant.INavigationParameter parameter, string? contract = null, bool resetStack = false, bool animate = true)
            where TViewModel : Sextant.INavigable;
    }
    public interface IView
    {
        System.Reactive.Concurrency.IScheduler MainThreadScheduler { get; }
        System.IObservable<Sextant.IViewModel?> PagePopped { get; }
        System.IObservable<System.Reactive.Unit> PopModal();
        System.IObservable<System.Reactive.Unit> PopPage(bool animate = true);
        System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = true);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modalViewModel, string? contract, bool withNavigationPage = true);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel viewModel, string? contract, bool resetStack, bool animate = true);
    }
    public interface IViewModel
    {
        string Id { get; }
    }
    public interface IViewModelFactory
    {
        TViewModel Create<TViewModel>(string? contract = null)
            where TViewModel : Sextant.IViewModel;
    }
    public interface IViewStackService
    {
        System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> ModalStack { get; }
        System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> PageStack { get; }
        Sextant.IView View { get; }
        System.IObservable<System.Reactive.Unit> PopModal(bool animate = true);
        System.IObservable<System.Reactive.Unit> PopPage(bool animate = true);
        System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = true);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modal, string? contract = null, bool withNavigationPage = true);
        System.IObservable<System.Reactive.Unit> PushModal<TViewModel>(string? contract = null, bool withNavigationPage = true)
            where TViewModel : Sextant.IViewModel;
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable page, string? contract = null, bool resetStack = false, bool animate = true);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel page, string? contract = null, bool resetStack = false, bool animate = true);
        System.IObservable<System.Reactive.Unit> PushPage<TViewModel>(string? contract = null, bool resetStack = false, bool animate = true)
            where TViewModel : Sextant.IViewModel;
        System.IObservable<Sextant.IViewModel> TopModal();
        System.IObservable<Sextant.IViewModel> TopPage();
    }
    public class NavigationParameter : System.Collections.Generic.Dictionary<string, object>, Sextant.INavigationParameter, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.IEnumerable
    {
        public NavigationParameter() { }
    }
    public sealed class ParameterViewStackService : Sextant.ParameterViewStackServiceBase
    {
        public ParameterViewStackService(Sextant.IView view) { }
        public ParameterViewStackService(Sextant.IView view, Sextant.IViewModelFactory viewModelFactory) { }
    }
    public abstract class ParameterViewStackServiceBase : Sextant.ViewStackServiceBase, Sextant.IParameterViewStackService, Sextant.IViewStackService
    {
        protected ParameterViewStackServiceBase(Sextant.IView view, Sextant.IViewModelFactory viewModelFactory) { }
        public System.IObservable<System.Reactive.Unit> PopPage(Sextant.INavigationParameter parameter, bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.INavigable navigableModal, Sextant.INavigationParameter parameter, string? contract = null, bool withNavigationPage = true) { }
        public System.IObservable<System.Reactive.Unit> PushModal<TViewModel>(Sextant.INavigationParameter parameter, string? contract = null, bool withNavigationPage = true)
            where TViewModel : Sextant.INavigable { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable navigableViewModel, Sextant.INavigationParameter parameter, string? contract = null, bool resetStack = false, bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PushPage<TViewModel>(Sextant.INavigationParameter parameter, string? contract = null, bool resetStack = false, bool animate = true)
            where TViewModel : Sextant.INavigable { }
    }
    public class Sextant
    {
        public Sextant() { }
        public Splat.IMutableDependencyResolver MutableLocator { get; }
        public static Sextant.Sextant Instance { get; }
    }
    public static class SextantExtensions
    {
        public static void Initialize(this Sextant.Sextant sextant) { }
    }
    public static class ViewModelActionExtensions
    {
        public static object InvokeViewModelAction<T>(this object viewModel, System.Action<T> action)
            where T :  class { }
    }
    public static class ViewModelFactory
    {
        public static Sextant.IViewModelFactory Current { get; }
    }
    [System.Serializable]
    public class ViewModelFactoryNotFoundException : System.Exception
    {
        public ViewModelFactoryNotFoundException() { }
        public ViewModelFactoryNotFoundException(string message) { }
        protected ViewModelFactoryNotFoundException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) { }
        public ViewModelFactoryNotFoundException(string message, System.Exception innerException) { }
    }
    public sealed class ViewStackService : Sextant.ViewStackServiceBase
    {
        public ViewStackService(Sextant.IView view) { }
        public ViewStackService(Sextant.IView view, Sextant.IViewModelFactory viewModelFactory) { }
    }
    public abstract class ViewStackServiceBase : Sextant.IViewStackService, Splat.IEnableLogger, System.IDisposable
    {
        protected ViewStackServiceBase(Sextant.IView view, Sextant.IViewModelFactory viewModelFactory) { }
        protected Sextant.IViewModelFactory Factory { get; }
        protected Splat.IFullLogger Logger { get; }
        public System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> ModalStack { get; }
        protected System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> ModalSubject { get; }
        protected System.Reactive.Disposables.CompositeDisposable NavigationDisposables { get; }
        public System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> PageStack { get; }
        protected System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> PageSubject { get; }
        public Sextant.IView View { get; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public System.IObservable<System.Reactive.Unit> PopModal(bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PopPage(bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modal, string? contract = null, bool withNavigationPage = true) { }
        public System.IObservable<System.Reactive.Unit> PushModal<TViewModel>(string? contract = null, bool withNavigationPage = true)
            where TViewModel : Sextant.IViewModel { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable viewModel, string? contract = null, bool resetStack = false, bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel viewModel, string? contract = null, bool resetStack = false, bool animate = true) { }
        public System.IObservable<System.Reactive.Unit> PushPage<TViewModel>(string? contract = null, bool resetStack = false, bool animate = true)
            where TViewModel : Sextant.IViewModel { }
        public System.IObservable<Sextant.IViewModel> TopModal() { }
        public System.IObservable<Sextant.IViewModel> TopPage() { }
        protected static void AddToStackAndTick<T>(System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<T>> stackSubject, T item, bool reset) { }
        protected static void PopRootAndTick<T>(System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<T>> stackSubject, System.Reactive.Disposables.CompositeDisposable disposable) { }
        protected static T PopStackAndTick<T>(System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<T>> stackSubject) { }
    }
}
namespace System.Reactive.Linq
{
    public static class SubscribeSafeExtensions { }
    public static class ToSignalExtension { }
    public static class WhereNotNullExtension { }
}