[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")]
namespace Sextant.Abstraction
{
    public interface IPageViewModel
    {
        string Id { get; }
    }
    public interface IView
    {
        System.IObservable<Sextant.Abstraction.IPageViewModel> PagePopped { get; }
        System.IObservable<System.Reactive.Unit> PopModal();
        System.IObservable<System.Reactive.Unit> PopPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.Abstraction.IPageViewModel modalViewModel, string contract);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.Abstraction.IPageViewModel pageViewModel, string contract, bool resetStack, bool animate = True);
    }
    public interface IViewStackService
    {
        System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.Abstraction.IPageViewModel>> ModalStack { get; }
        System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.Abstraction.IPageViewModel>> PageStack { get; }
        Sextant.Abstraction.IView View { get; }
        System.IObservable<System.Reactive.Unit> PopModal(bool animate = True);
        System.IObservable<System.Reactive.Unit> PopPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.Abstraction.IPageViewModel modal, string contract = null);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.Abstraction.IPageViewModel page, string contract = null, bool resetStack = False, bool animate = True);
        System.IObservable<Sextant.Abstraction.IPageViewModel> TopModal();
        System.IObservable<Sextant.Abstraction.IPageViewModel> TopPage();
    }
}
namespace Sextant
{
    public class NavigationView : Xamarin.Forms.NavigationPage, Sextant.Abstraction.IView
    {
        public NavigationView(System.Reactive.Concurrency.IScheduler mainScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler, ReactiveUI.IViewLocator viewLocator, Xamarin.Forms.Page rootPage) { }
        public NavigationView(System.Reactive.Concurrency.IScheduler mainScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler, ReactiveUI.IViewLocator viewLocator) { }
        public System.IObservable<Sextant.Abstraction.IPageViewModel> PagePopped { get; }
        public System.IObservable<System.Reactive.Unit> PopModal() { }
        public System.IObservable<System.Reactive.Unit> PopPage(bool animate) { }
        public System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.Abstraction.IPageViewModel modalViewModel, string contract) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.Abstraction.IPageViewModel pageViewModel, string contract, bool resetStack, bool animate) { }
    }
    public class static SextantHelper
    {
        [System.ObsoleteAttribute("Use the Initialize method.")]
        public static Sextant.NavigationView Initialise<TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TViewModel :  class, Sextant.Abstraction.IPageViewModel { }
        public static Sextant.NavigationView Initialize<TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TViewModel :  class, Sextant.Abstraction.IPageViewModel { }
        public static void RegisterNavigation<TView, TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TView : ReactiveUI.IViewFor
            where TViewModel :  class, Sextant.Abstraction.IPageViewModel { }
        public static void RegisterView<TView, TViewModel>(string contract = null)
            where TView : ReactiveUI.IViewFor, new ()
            where TViewModel :  class, Sextant.Abstraction.IPageViewModel { }
    }
    public sealed class ViewStackService : Sextant.Abstraction.IViewStackService, System.IDisposable
    {
        public ViewStackService(Sextant.Abstraction.IView view) { }
        public System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.Abstraction.IPageViewModel>> ModalStack { get; }
        public System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.Abstraction.IPageViewModel>> PageStack { get; }
        public Sextant.Abstraction.IView View { get; }
        public void Dispose() { }
        public System.IObservable<System.Reactive.Unit> PopModal(bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PopPage(bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.Abstraction.IPageViewModel modal, string contract = null) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.Abstraction.IPageViewModel page, string contract = null, bool resetStack = False, bool animate = True) { }
        public System.IObservable<Sextant.Abstraction.IPageViewModel> TopModal() { }
        public System.IObservable<Sextant.Abstraction.IPageViewModel> TopPage() { }
    }
}
namespace System.Reactive.Linq
{
    public class static SubscribeSafeExtensions { }
    public class static ToSignalExtension { }
    public class static WhereNotNullExtension { }
}