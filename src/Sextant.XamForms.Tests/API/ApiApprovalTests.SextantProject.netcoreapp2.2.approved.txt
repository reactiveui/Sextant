[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace Sextant.XamForms
{
    public class static DependencyResolverMixins
    {
        public static string NavigationView { get; }
        public static Sextant.XamForms.NavigationView GetNavigationView(this Splat.IReadonlyDependencyResolver dependencyResolver, string contract = null) { }
        public static Splat.IMutableDependencyResolver RegisterNavigation<TView>(this Splat.IMutableDependencyResolver dependencyResolver, System.Func<TView> navigationViewFactory)
            where TView : ReactiveUI.IViewFor, Sextant.IView { }
        public static Splat.IMutableDependencyResolver RegisterNavigationView(this Splat.IMutableDependencyResolver dependencyResolver) { }
        public static Splat.IMutableDependencyResolver RegisterNavigationView(this Splat.IMutableDependencyResolver dependencyResolver, System.Reactive.Concurrency.IScheduler mainThreadScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler) { }
    }
    public class NavigationView : Xamarin.Forms.NavigationPage, Sextant.IView
    {
        public NavigationView(System.Reactive.Concurrency.IScheduler mainScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler, ReactiveUI.IViewLocator viewLocator, Xamarin.Forms.Page rootPage) { }
        public NavigationView(System.Reactive.Concurrency.IScheduler mainScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler, ReactiveUI.IViewLocator viewLocator) { }
        public System.IObservable<Sextant.IPageViewModel> PagePopped { get; }
        public System.IObservable<System.Reactive.Unit> PopModal() { }
        public System.IObservable<System.Reactive.Unit> PopPage(bool animate) { }
        public System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.IPageViewModel modalViewModel, string contract) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.IPageViewModel pageViewModel, string contract, bool resetStack, bool animate) { }
    }
    public class static SextantExtensions
    {
        public static void InitializeForms(this Sextant.Sextant sextant) { }
    }
    public class static SextantHelper
    {
        [System.ObsoleteAttribute("Use the Initialize method.")]
        public static Sextant.XamForms.NavigationView Initialise<TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TViewModel :  class, Sextant.IPageViewModel { }
        [System.ObsoleteAttribute("Use the dependency resolver mixins.")]
        public static Sextant.XamForms.NavigationView Initialize<TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TViewModel :  class, Sextant.IPageViewModel { }
        [System.ObsoleteAttribute("Use the dependency resolver mixins.")]
        public static void RegisterNavigation<TView, TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TView : ReactiveUI.IViewFor
            where TViewModel :  class, Sextant.IPageViewModel { }
        [System.ObsoleteAttribute("Use the dependency resolver mixins.")]
        public static void RegisterView<TView, TViewModel>(string contract = null)
            where TView : ReactiveUI.IViewFor, new ()
            where TViewModel :  class, Sextant.IPageViewModel { }
    }
}